自动化测试，除了原生的3大类外，还有两个比较有意义的框架，
一个是appium试图以一个用例多平台运行。
一个是android上的robolectric，试图模拟出一个android的Framework以让仪器测试变得也能单元测试化，而不依赖设备。

对于实践之中，我们首先要面对的第一个思维上的问题是，写一个鲁棒性强的测试代码，还是写一个针对特定环境的测试代码。
实际上这可能是从应用工程开发的角度需要转变为测试思维的一个过程。这个问题我理解的答案是后者。测试代码不应该鲁棒，
它要做的就是，去简简单单，简化环境，从而做出100%肯定的答案从而可以检查验证。一旦出错，必然认定有bug。

另一个问题逐渐在后面有遇到，就是对外部的依赖该如何管理。若依赖了后台服务的实际返回，那么好处是可以实时发现外部环境的问题，
缺点就是，很可能外部环境的问题会阻塞后续测试的进行。若不依赖，我们若通过Mock去处理，那么该如何管理这些测试，
并且尽可能最后还能保证与外界真实环境的数据相符、相兼容。


